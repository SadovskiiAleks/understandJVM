# ДЗ "Понимание JVM"


## Исследуемый код

    public class JvmComprehension {
    
        public static void main(String[] args) {
            int i = 1;                      // 1
            Object o = new Object();        // 2
            Integer ii = 2;                 // 3
            printAll(o, i, ii);             // 4
            System.out.println("finished"); // 7
        }
    
        private static void printAll(Object o, int i, Integer ii) {
            Integer uselessVar = 700;                   // 5
            System.out.println(o.toString() + i + ii);  // 6
        }
    }

## Результаты исследования

0 . Изначально проиcходит загрузка классов. (JvmComprehension,Object, String, Integer) в Metaspace (область хранения метоинформации)

1. Далее в Steak создаеться область Фрейм(Кадр) с классом Main и записывается int i = 1, тоже в стек без записи в heap т.к. это примитивный тип данных.

2. В heap создается область памяти равная размеру объекта. Во фрейм Main записывается
   объект o который содержит сслку на объект в heap.

3. В heap создается область памяти т.к. создается новый объект класса Integer(Сынок Object, не примитивный). Во фрейм Main записывается объект ii который содержит ссылку на объект Integer

4. Инициализируется новый фрейм printAll, который создает объекты хранящие ссылки на существующие объекты в heap (Для объектов). Как ведет себя стек при обращении к примитивному классу мне не понятно. Скорее инициализирует его заново.

5. Тоже, что и в 3 только ссылка на объект heap-а храниться во фрейме printAll.

6. Происходит создание нового фрейма System. Что дальше не понятно

7. Происходит создание нового фрейма System. Инициализация объекта String, запись ссылки на объект в heap.

Сборщик мусора в рамках данной программы не выполняется, т.к. его инициализация останавливает программу и на таком маленьком промежутке работы он не сработает.
Но если абстрагироваться после исполнения команды printAll, нам не потребуется область памяти System, она будет стерта. Остальные объекты не сотрутся пока не потеряют связь фрейма или steack с heap
